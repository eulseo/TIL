git의 3가지 공간

working directory	 ->     Staging area      ->         Repository (git directory)
                        add                    commit
   Untracked 
    tracked 

Untracked : add 된적 없는 파일, ignore 된 파일

tracked : add 된적 있고 변경내역이 있는 파일
          Repository에 있는 파일이 수정사항이 발생하면 tracked 파일로 감 

파일의 삭제 : git rm (파일명)    ex) git rm tigers.yaml

파일의 이름변경 : git mv (전 이름)(바꿀 이름)    ex) git mv tigers.yaml zzamtigers.yaml

reset의 3가지 옵션 : --soft, --mixed, --hard

--soft :  Repository -> Staging area

--mixed : Repository -> working directory, 디폴트값

--hard : 완전히 삭제  



Git의 HEAD : 현재 속한 branch의 가장 최신 커밋

파일 뒤로 이동 : git checkout HEAD^ 
                git checkout HEAD~                      
                git checkout HEAD^5             ->  참고 : reset, revert랑은 완전히 다름 
                git checkout HEAD~5
                        ㄴ  전부 사용 가능

이동을 한단계 되돌리기(컨트롤 z) : git checkout -
HEAD를 사용하여 reset 하기 : git reset (원하는 옵션) HEAD(옵션)   ex) git reset --hard HEAD^2


 
fetch : 원격 저장소의 최신 커밋을 로컬로 가져오기만 함 (미리보기 느낌)
pull : 원격 저장소의 최신 커밋을 로컬로 가져와 merge 또는 rebase (진짜 가져옴)

fetch한 내용 미리보기 : git fetch -> git checkout origin/(branch 이름)   ex) git checkout origin/main
                                                   
git pull : 디폴트 값은  merge

원격의 새 branch 확인 : git checkout origin/(branch 이름)



커밋 권장사항 : 하나의 커밋에는 한 단위의 작업을 넣도록 한다
               커밋 메시지는 어떤 작업이 이루어 졌는지 알아볼 수 있도록 작성한다

커밋 메시지 컨벤션

type: subject                           ex ) feat : 압축파일 미리보기 기능 추가

body                                          -  사용자의 편의를 위해 압축을 풀기 전에
...                                               다음과 같이 압축파일 미리보기를 할 수 있도록 함
...                                           -  마우스 오른쪽 클릭
...                                           -  윈도우 탐색기 또는 맥 파인더의 미리보기 창
                                                  
footer                                        Closes #125

Type : feat  ->  새로운기능 추가
       fix  ->  버그 수정
       docs  ->  문서 수정
       style  ->  스타일 수정
       refactor  ->  코드 리팩토링
       perf  ->  성능 개선
       test  ->  테스트 추가
       chore  ->  빌드과정 또는 보조기능 수정

Subject : 커밋의 작업 내용 간략히 설명

Body : 길게 설명할 필요 있을 시 작성

Footer : 중요한 변경사항이 있을때 , 특정 이슈에 대한 해결 작업일때 작성



hunk : 변경사항의 하나의 단위
변경사항을 확인하고 Add 하기(hunk별로 스테이징하기) : git add -p                        
          ㄴ 하나하나 확인하면서 add 가능, 실수 방지

변경사항을 확인하고 Commit 하기 : git commit -v
           ㄴ 하나하나 확인하면서 commit 가능, 실수 방지

변경사항을 확인만 : git diff(working directory), git diff --staged (Staging area)



작업중에 갑작스럽게 다른 작업을 진행해야 할 때, 작업중인 사항을 잠시 치워두는 방법 : git stash

원하는 지점에 branch에서 다시 적용 : git stash pop

Stash 목록보기 : git stash list

메세지와 함께 Stash : git stash -m '(메세지)'   ex ) git stash -m 'Add Stash3'

Stash 사용법 정리 

git stash : 현 작업 치워두기
git stash apply : 치워둔 마지막 작업 적용 (번호로 항목 지정 가능)
git stash drop : 치워둔 마지막 작업 삭제  (번호로 항목 지정 가능)
git stash pop : 치워둔 마지막 작업 적용 및 삭제 
git stash branch (branch 이름) : 새 branch를 생성하여 pop (충돌사항이 있는 상황에 유용)
git stash clear : 치워둔 모든 항목들 비우기



가장 최근의 커밋 메세지 변경 : git commit --amend
가장 최근의 커밋 메세지 한줄로 변경 : git commit --amend -m '메세지'  ex) git commit --amend -m 'Add members'
                                                               
과거의 커밋을 수정, 삭제, 병합, 분할하기 : git rebase -i (수정파일의 전 파일 커밋 해시) 

명령어 : p, pick  -> 커밋 그대로 두기
        r, reword  ->  커밋 메시지 변경
        e, edit  ->  수정을 위해 정지 (직접수정)
        d, drop  -> 커밋 삭제
        s, squash  ->  앞 커밋에 합치기

기존 rebase와 같이 작업이 끝나면 git rebase --continue



Git에서 추적하지 않는 파일들 삭제 : git clean
ㄴ 옵션 / 설명
  -n -> 삭제될 파일들 보여주기
  -i -> 인터렉티브 모드 시작
  -d -> 폴더 포함
  -f -> 강제로 바로 지워버리기
  -x -> gitignore에 등록된 파일들도 삭제  (사용할때 조심)
 
     ↑    위의 옵션을 조합해서 사용 (-df를 자주사용 -> git clean -df)




특정 파일을 지정된 상태로 복구 : git restore  
워킹 디렉토리의 특정 파일 복구 : git restore (파일명)
스테이지에서 워킹 디렉토리로 돌려놓기 : git restore --staged (파일명)
특정 커밋의 상태로 되돌리기 : git restore --source=(HEAD~ 또는 커밋 해시) 파일명



reset으로 사라진 커밋을 복구 : git reflog -> 돌아갈 커밋해시를 얻기 -> git reset --hard (커밋 해시)



Git의 Tag : 특정 시점을 키워드로 저장하고 싶을 때, 커밋에 버전 정보를 붙이고자 할 때

태그 종류 : lightweight -> 특정 커밋을 가리키는 용도
           annotated -> 작성자 정보와 날짜, 메시지, GPG 서명 포함 가능	

마지막 커밋에 태그 달기 (lightweight) : git tag (태그)   ex) git tag v2.0.0

현존하는 태그 확인 : git tag

원하는 태그의 내용 확인 : git show v2.0.0

태그 삭제 : git tag -d v2.0.0

마지막 커밋에 태그 달기 (annotated) : git tag -a v2.0.0 
                                    git tag (태그) -m (태그 이름)  ex) git tag v2.0.0 -m '자진모리 버전'
                                                    
원하는 패턴으로 태그 필터링하기 : git tag -l 'v1.*' -> v1. 으로 시작하는 모든 태그가 뜸

원하는 버전으로 체크아웃 : git checkout v1.2.1

원격에 태그 동기화 : git push (원격명) (태그명)  ex) git push orgin v2.0.0

특정 태그 원격에서 삭제 : git push --delete (원격명) (태그명)

로컬의 모든 태그 원격에 올리기 : git push --tags

GitHub의 release : 다운로드 가능한 배포판 기능

release 만들기 : GitHub에서 태그 목록으로 -> 원하는 태그에서 Create release
