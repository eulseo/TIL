Git의 두가지 merge 전략 : Fastforword, 3-way merge

Fastforword : 메인브랜치에 신규 커밋이 없는 경우. 다른 브랜치를 만들지 않고 브랜치의 최신 커밋으로 헤드로 옮김
         ㄴ git merge (병합할 브랜치)      

3-way merge : 브랜치마다 신규 커밋이 하나 이상 있는 경우. 새로운 커밋을 생성하면서 합침
         ㄴ git merge --no-ff (병합할 브랜치)

다른 브랜치에서 원하는 커밋 가져오기 : git cherry pick (체리의 해시)
                        ㄴ 특정 커밋만 복제해서 가져오는것 , 다른 브랜치의 가져온 파일은 변화 x

다른 브랜치에서 파생된 브랜치 옮겨붙이기 : git rebase --onto (도착 브랜치) (다른 브랜치) (파생된 브랜치명)
                                                             ex) git rebase --onto main fruit citrus
                                                                          ㄴ main으로 fruit의 citrus를 가져옴

다른 브랜치의 커밋들을 하나로 묶어 가져오기 : git merge --squash (대상 브랜치)
                                                                       ㄴ 가져오면 스테이지(add) 되어 있기때문에 commit 해야함

Gitflow : 협업을 위한 브랜칭 전략

브랜치	            용도
		
main	       제품 출시/배포
develop	       다음 출시/배포를 위한 개발 진행
release	       출시/배포 전 테스트 진행(QA)
feature	       기능 개발
hotfix	       긴급한 버그 수정



각 커밋마다의 변경사항 함께 보기 : git log -p

최근 n개 커밋만 보기 : git log -(갯수)   ex) git log -3

통계와 함께 보기 : git log --stat
                          git log --shortstat

한 줄로 보기 : git log --oneline

변경사항 내 단어 검색 : git log -S(검색어)

커밋 메시지로 검색 : git log --grep (검색어)

워킹 디렉토리의 변경사항 확인 : git diff

파일명만 확인 : git diff --name-only

스테이지에서 확인 : git diff --staged

커밋간의 차이 확인 : git diff (커밋1) (커밋2)

브랜치간의 차이 확인 : git diff (브랜치1) (브랜치2)

파일의 부분별로 작성자 확인하기 : git blame (파일명)

특정 부분 지정해서 작성자 확인하기 : git blame -L 시작위치/끝위치 (파일명)  
                   l                                 ex) git blame -L 10,13 tigers.yaml
                   l                                     git blame -L 10,+3 tigers.yaml
                   ㄴ 하지만 각 ide별 플러그인을 더 추천

이진 탐색 알고리즘으로 문제의 발생 시점을 찾아내기 : git bisect

이진 탐색 시작 : git bisect start

의심 지점으로 이동 : git checkout (의심지점 해시)

오류 발생 x : git bisect good

오류 발생 o : git bisect bad
                
이진 탐색 종료 : git bisect reset           
