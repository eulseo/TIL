● 스레드 제어와 생명주기 1

• 스레드 기본정보

▶ log("myThread = " + myThread);
   myThread 객체를 문자열로 변환하여 반환한다, 스레드ID, 스레드 이름, 우선순위, 스레드 그룹을 포함하여 반환한다
   ex) Thread[#21,myThread,5,main]
   
▶ log("myThread.threadId() = " + myThread.threadId());
   스레드의 고유 식별자를 반환하는 메서드이다

▶ log("myThread.getName() = " + myThread.getName());
   스레드의 이름을 반환하는 메서드이다

▶ log("myThread.getPriority() = " + myThread.getPriority());
   스레드의 우선순위를 반환하는 메서드이다

▶ log("myThread.getThreadGroup() = " + myThread.getThreadGroup());
   스레드가 속한 스레드 그룹을 반환하는 메서드이다
   스레드는 기본적으로 다른 스레드 에 의해 생성된다. 이러한 생성 관계에서 새로 생성된 스레드는 생성한 스레드를 부모로 간주한다
   모든 스레드는 부모 스레드와 동일한 스레드 그룹에 속하게 된다
   스레드 그룹은 여러 스레드를 하나의 그룹으로 묶어서 특정 작업(예: 일괄 종료, 우선순위 설정 등)을 수행할 수 있다.

▶ log("myThread.getState() = " + myThread.getState());
   스레드의 현재 상태를 반환하는 메서드이다.

• 스레드의 상태

▶ New : 스레드가 생성되고 아직 시작하지 않은 상태이다
         스레드가 생성되었지만 아직 start() 메서드가 호출되지 않은 상태이다.
         
▶ Runnable : 스레드가 실행중이거나 실행준비가 된 상태이다
              start() 메서드가 호출되면 스레드가 이 상태로 들어간다
              
▶ Blocked : 스레드가 다른 스레드에 의해 동기화 락을 얻기 위해 기다리는 상태이다.
             synchronized 블록에 진입하기 위해 락을 얻어야 하는 경우 이 상태에 들어간다.
             
 
▶ Waiting : 스레드가 다른 스레드의 특정 작업이 완료될 때 까지 무기한 기다리는 상태이다.
             wait(), join() 메서드가 호출될때 이 상태가 된다.
             다른 스레드가 notify(), notifyAll() 메서드를 호출하거나, join()이 완료될때 까지 기다린다.
             
▶ Timed Waiting : 스레드가 다른 스레드의 특정 작업이 완료될 때 까지 특정 시간동안만 기다리는 상태이다.
                   sleep(ms), wait(ms), join(ms) 메서드가 호출될때 이 상태가 된다.
                   주어진 시간이 경과하거나 다른 스레드가 해당 스레드를 깨우면 이상태에서 벗어난다.

▶ Terminated : 스레드가 실행이 완료된 상태이다.

• join()

 public static void main(String[] args) throws InterruptedException {
 
           log("Start");
           SumTask task1 = new SumTask(1, 50);

           Thread thread1 = new Thread(task1, "thread-1");

           thread1.start();
        
           // 스레드가 종료될 때 까지 대기
           log("join() - main 스레드가 thread1 종료까지 대기");
           thread1.join();
           log("main 스레드 대기 완료");
           
           log("task1.result = " + task1.result);
 
           log("End");
}

static class SumTask implements Runnable {
         int startValue;
         int endValue;
         int result;

      public SumTask(int startValue, int endValue) {
             this.startValue = startValue;
             this.endValue = endValue;
                  }
      
            @Override
            public void run() {
                     log("작업 시작");
                     sleep(2000);  // 2초간 작업한다 가정
                     int sum = 0;
                    for (int i = startValue; i <= endValue; i++) {
                           sum += i;
                       }
                     result = sum;
                     
                      log("작업 완료 result = " + result);
                    }
           }
 }

 join()을 사용하면 main 스레드는 Waiting 상태로 thread1 스레드의 종료될때까지 기다림
 특정 스레드가 완료될 때 까지 기다려야 하는 상황이라면 join()을 사용


• join(ms)

public static void main(String[] args) throws InterruptedException {
 
           log("Start");
           SumTask task1 = new SumTask(1, 50);

           Thread thread1 = new Thread(task1, "thread-1");

           thread1.start();
        
           // 스레드가 종료될 때 까지 대기
           log("join(1000) - main 스레드가 thread1 종료까지 1초 대기");
           thread1.join(1000);
           log("main 스레드 대기 완료");
           
           log("task1.result = " + task1.result);
 
           log("End");
}

static class SumTask implements Runnable {
         int startValue;
         int endValue;
         int result;

      public SumTask(int startValue, int endValue) {
             this.startValue = startValue;
             this.endValue = endValue;
                  }
      
            @Override
            public void run() {
                     log("작업 시작");
                     sleep(2000);  // 2초간 작업한다 가정
                     int sum = 0;
                    for (int i = startValue; i <= endValue; i++) {
                           sum += i;
                       }
                     result = sum;
                     
                      log("작업 완료 result = " + result);
                    }
           }
 }

join(ms)을 사용하면 main 스레드는 Timed Waiting 상태로 thread1 스레드의 종료를 특정 시간만큼 기다림
다른 스레드의 작업을 무한정 기다릴 수 없다면 join(ms)를 사용

• 체크 예외 재정의 

부모 메서드가 체크 예외를 던지지 않는 경우, 재정의된 자식 메서드도 체크 예외를 던질 수 없다.
자식 메서드는 부모 메서드가 던질 수 있는 체크 예외의 하위 타입만 던질 수 있다.

• Runnable 인터페이스의 run() 메서드를 구현할때 InterruptedException 체크에외를 밖으로 못던지는 이유

Runnable 인터페이스의 run() 메서드는 아무런 체크 예외를 던지지 않는다.
따라서 Runnable 인터페이스의 run() 메서드를 재정의 하는 곳에서는 체크 예외를 밖으로 던질 수 없다.
   
