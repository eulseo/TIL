CSS를 적용하는 세 가지 방법

인라인 스타일(inline style) 방식 :  HTML 태그마다 style 속성으로 CSS 코드를 넣어주는 방식
                                   여러 요소들에 공통 속성을 재사용하여 부여할 수 없고 HTML 코드와 CSS 코드가 분리되지 않기 
                                  때문에 특별한 경우를 제외하고는 사용하지 않음

내부 스타일 시트(internal style sheet) 방식 : head 태그 안에 style 태그를 두고 그 안에 CSS 코드를 작성하는 방식
                                            HTML과 CSS의 전체 코드량이 많지 않고 CSS가 해당 HTML 문서에서만 적용될 경우 유용하게 사용
                                                   

링킹 스타일 시트(linking style sheet) 방식 : 외부의 CSS 파일을 HTML 문서에 연결하는 방식
                                           TML과 CSS의 코드가 분리되고 CSS 코드를 여러 HTML 파일에서 공통으로 사용할 수 있으므로 가장 널리 사용되는 방식


CSS 기본 문법

선택자 {
  속성1: 값;
  속성2: 값;
  
}

점(.)은 클래스 선택자이고, 오른쪽 화살표(>)는 자식 선택자
같은 선택자의 경우 뒤에 오는 것이 우선순위 높음

------------------------------------------------------------------------------------------------------------------------

1. 선택자 

● 모든 요소 선택 

* {
  속성1: 값;
  속성2: 값;
}

● 태그 선택자

p {
  속성1: 값;
  속성2: 값;
}

● class 선택자 : 태그보다 우선순위 높음 ( 페이지상의 여러 요소가 같은 class를 가질 수 있음 )

.blue {
  속성1: 값;
  속성2: 값;
}

다른 선택자에 이어붙일 수 있음(태그, 클래스 등...)
선택자는 구체적일수록 우선순위 높음 

p.blue {
  속성1: 값;
  속성2: 값;
}

.blue.dark {
  속성1: 값;
  속성2: 값;
}

p.blue.dark {
  속성1: 값;
  속성2: 값;
}

● id 선택자 : class보다 우선순위 높음 ( id는 페이지상에서 요소마다 고유해야 함 )

#red {
  속성1: 값;
  속성2: 값;
}

● 그룹 선택자

span, .dark, #red {
  속성1: 값;
  속성2: 값;
}

● 자손 결합자 (모든 자식)

.outer li {
  속성1: 값;
  속성2: 값;
}

● 자식(1촌 자손) 결합자

.outer > li {
  속성1: 값;
  속성2: 값;
}

.outer > li li {
  속성1: 값;
  속성2: 값;
}

● 뒤따르는 모든 동생들 결합자

.starter ~ li {
  속성1: 값;
  속성2: 값;
}

● 뒤따르는 바로 다음 동생 결합자

.starter + li {
  속성1: 값;
  속성2: 값;
}

● 첫 번째, 마지막 요소 가상 클래스

ol li:first-child,
ol li:last-child {
  속성1: 값;
  속성2: 값;
}

● ~가 아닌 요소 가상 클래스

.outer > li:not(:last-child) {
  속성1: 값;
  속성2: 값;
}

ul:not(.outer) li {
  속성1: 값;
  속성2: 값;
}

● ~번째 요소 가상 클래스 (* #, #n, #n+#, odd, even 등 가능) 

ol li:nth-child(3) {
  속성1: 값;
  속성2: 값;
}

● 마우스오버 가상 클래스

li:hover {
  속성1: 값;
  속성2: 값;
}

------------------------------------------------------------------------------------------------------------------------

2. 속성

● font-style  : 글자를 기울일 때 사용 ( normal, italic, oblique )

● font-weight : 글자의 굵기 조절 ( normal, bold , 100~900 )

● font-size : 글자의 크기를 지정 ( px, %, em, rem )
      ㄴ    px는 절대값으로서 픽셀 단위
            100%는 1em으로, 이들은 부모 요소와의 상대적 크기를 나타냄, 요소의 중첩에 영향을 받음
            rem은 html 요소와의 상대적 크기를 가지므로, 요소의 중첩에 영향을 받지 않음
            pt는 1인치/72로, 프린트할 컨텐츠에 사용

● text-decoration : 밑줄, 취소선, 물결선 등으로 글을 꾸며주는데 사용
         ㅣ         여러 꾸밈요소를 함께 사용할 수 있으며 선의 형태, 색, 굵기 등 디테일을 지정가능   ex) underline green 4px
         ㅣ             
          ㄴ underline : 밑줄
             overline : 위에 줄
             line-through : 취소선
             wavy ~~~~~~ : 물결선     ex) wavy underline -> 밑에 물결선

● text-transform : 알파벳의 대소문자 표시에 사용 ( capitalize, uppercase, lowercase )
                                                    ㄴ 첫글자 대문자로

● text-shadow : 텍스트에 그림자를 줄때 사용
                'x좌표, y좌표, 흐림(선택), 색' 형식으로 그림자를 넣을 수 있고 쉼표로 구분해서 여럿을 넣을 수도 있음


● text-align  : 텍스트의 정렬 방식을 지정 ( left, right, center, justify )              
                                                                 ㄴ 양쪽 정렬

● letter-spacing : 한글자 사이 조절
● word-spacing : 단어 간격 조절 
● line-height : 줄 높이 조절

● text-indent : 들여쓰기를 조절

● list-style : ul과 ol 목록의 불릿, 숫자 스타일을 지정
               ul, ol 여부와 관계없이 기호, 서수, 원하는 문자, 이모지, 심지어 이미지까지 사용 가능
              
------------------------------------------------------------------------------------------------------------------------

색상 표현하기 

keyword : 색상마다 부여된 이름  ( red, green 등 )

RGB(A)는 빨강, 초록, 파랑의 광원으로 색을 혼합하는 방식이며 끝에 알파값을 붙여서 투명도를 조절 가능 ( rgb(255,0,0) 등 )

HEX는 R, G, B, Alpha 값들을 16진수형태로 나타낸 것 ( #ff0000 등 )

HSL(A)은 색상, 채도, 명도값 그리고 알파값을 조합하여 색을 나타냄 ( hsl(0,100%,200%) 등 )

------------------------------------------------------------------------------------------------------------------------

인라인 요소와 블록 요소

	                                         inline	                    block	            inline-block

기본 너비	                                컨텐츠만큼	             부모의 너비만큼          컨텐츠만큼
  
width, height 속성	                        무시	                     적용	               적용

가로공간 차지	                              공유	                     독점	               공유

margin 속성 ( 바깥쪽 여백 )	              가로만 적용	         모두 적용 (상하 상쇄)       모두 적용

padding 속성 ( 안쪽 여백 )	                가로만 적용                모두 적용	            모두 적용
                                          세로는 배경색만

------------------------------------------------------------------------------------------------------------------------

박스모델 1

inline이 아닌 요소는 width와 height로 크기를 조절

크기 조절 단위 : 부모의 길이에 상대적인 %
                뷰포트(viewport) 너비와 높이의 1/100 단위인 vw, vh
                이들 중 큰 것과 작은 것의 1/100 단위인 vmax, vmin
                연산자를 사용하여 필요에 맞는 길이로 조절하느 calc(100% - 50px)


margin과 padding에는 아래 형식 중 하나로 값을 줄 수 있음

공통
세로 가로
위 오른쪽 아래 왼쪽
위 가로 아래

margin과 padding은 -top, -bottom, -left, -right을 속성명에 붙여 따로 지정 가능
 
블록 요소의 위, 아래 margin은 전후 블록 요소의 것과 상쇄

margin에서 auto 값은 너비가 지정된 블록 요소의 가로 방향에서 남은 공간을 채움
이 방법은 컨텐츠 섹션을 화면 가운데로 배치하는데 널리사용, 오늘날에는 이후 배울 flex 방식으로 많이 대체
